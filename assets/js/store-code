    const API_KEY = 'AIzaSyBO2sNoWRMt2fzF3d0kDia0g80EiYxTRwo'; // Replace with your API Key
    const CHANNEL_ID = 'UCq-Fj5jknLsUf-MWSy4_brA'; // Replace with a valid YouTube Channel ID
    const MAX_RESULTS = 10;

    async function fetchVideos() {
        const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${CHANNEL_ID}&maxResults=${MAX_RESULTS}&order=date&type=video&key=${API_KEY}`);
        const data = await response.json();

        const videoContainer = document.getElementById("video-container");
        videoContainer.innerHTML = "";

        data.items.forEach(video => {
            const videoId = video.id.videoId;
            const videoTitle = video.snippet.title;
            const iframe = `<iframe width="100%" height="100%" src="https://www.youtube.com/embed/${videoId}" frameborder="0" allowfullscreen></iframe>`;
            // videoContainer.innerHTML += `<h3>${videoTitle}</h3>${iframe}`;
            videoContainer.innerHTML += `
            <div class="card_style_two">
                <div class="image_outer_wrap">
                    <div class="image_wrap">
                     ${iframe}
                        <div class="play_icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="#3BE477" class="bi bi-play-circle-fill" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814z"/>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="name_wrap_one">
                    <h6><a href="#">${videoTitle}</a></h6>
                </div>
            </div>`;

        });
    }

    fetchVideos();




    const API_KEY = 'AIzaSyBO2sNoWRMt2fzF3d0kDia0g80EiYxTRwo'; // Replace with your API Key
const CHANNEL_ID = 'UC_A7K2dXFsTMAciGmnNxy-Q'; // Replace with a valid YouTube Channel ID
const MAX_RESULTS = 10;

async function fetchVideos() {
    try {
        const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${CHANNEL_ID}&maxResults=${MAX_RESULTS}&order=date&type=video&key=${API_KEY}`);
        const data = await response.json();

        if (data.error) {
            console.error("YouTube API Error:", data.error.message);
            return;
        }

        const videoContainer = document.getElementById("video-container");
        videoContainer.innerHTML = "";

        data.items.forEach(video => {
            const videoId = video.id.videoId;
            const videoTitle = video.snippet.title;
            const thumbnailUrl = video.snippet.thumbnails.high.url;

            const videoCard = document.createElement("div");
            videoCard.className = "card_style_two";

            videoCard.innerHTML = `
                <div class="image_outer_wrap">
                    <div class="image_wrap">
                        <img class="thumbnail" src="${thumbnailUrl}" alt="Thumbnail">
                    </div>
                    <div class="play_icon" onclick="playVideo(this, '${videoId}')">
                        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="#3BE477" class="bi bi-play-circle-fill" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814z"/>
                        </svg>
                    </div>
                </div>
                <div class="name_wrap_one">
                    <h6>${videoTitle}</h6>
                </div>`;

            videoContainer.appendChild(videoCard);
        });

    } catch (error) {
        console.error("Error fetching YouTube videos:", error);
    }
}

function playVideo(playIconElement, videoId) {
    const imageWrap = playIconElement.previousElementSibling; // Target `.image_wrap`
    if (imageWrap) {
        imageWrap.innerHTML = `<iframe width="100%" height="200px" src="https://www.youtube.com/embed/${videoId}?autoplay=1" frameborder="0" allowfullscreen></iframe>`;
    }
}

fetchVideos();


const API_KEY = 'AIzaSyBO2sNoWRMt2fzF3d0kDia0g80EiYxTRwo'; // Replace with your API Key
const CHANNEL_ID = 'UC_A7K2dXFsTMAciGmnNxy-Q'; // Replace with a valid YouTube Channel ID
const MAX_RESULTS = 10;

async function fetchVideos() {
    try {
        const response = await fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${CHANNEL_ID}&maxResults=${MAX_RESULTS}&order=date&type=video&key=${API_KEY}`);
        const data = await response.json();

        if (data.error) {
            console.error("YouTube API Error:", data.error.message);
            return;
        }

        const videoContainer = document.getElementById("video-container");
        videoContainer.innerHTML = "";

        data.items.forEach(video => {
            const videoId = video.id.videoId;
            const videoTitle = video.snippet.title;
            const thumbnailUrl = video.snippet.thumbnails.high.url;

            const videoCard = document.createElement("div");
            videoCard.className = "card_style_two";

            videoCard.innerHTML = `
                <div class="image_outer_wrap">
                    <div class="image_wrap">
                        <img class="thumbnail" src="${thumbnailUrl}" alt="Thumbnail">
                    </div>
                    <div class="play_icon" onclick="playVideo(this, '${videoId}')">
                        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="#3BE477" class="bi bi-play-circle-fill" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M6.79 5.093A.5.5 0 0 0 6 5.5v5a.5.5 0 0 0 .79.407l3.5-2.5a.5.5 0 0 0 0-.814z"/>
                        </svg>
                    </div>
                </div>
                <div class="name_wrap_one">
                    <h6>${videoTitle}</h6>
                </div>`;

            videoContainer.appendChild(videoCard);
        });

    } catch (error) {
        console.error("Error fetching YouTube videos:", error);
    }
}

// Track currently playing video and its play icon
let currentPlayingVideo = null;
let currentPlayIcon = null;

function playVideo(playIconElement, videoId) {
    const imageWrap = playIconElement.previousElementSibling; // Get .image_wrap
    const thumbnailImg = imageWrap.querySelector("img"); // Get the thumbnail image

    // If the clicked video is already playing, do nothing
    if (imageWrap.querySelector("iframe")) return;

    // If there's a video already playing, reset it back to thumbnail
    if (currentPlayingVideo && currentPlayingVideo !== imageWrap) {
        const previousImageWrap = currentPlayingVideo;
        const previousThumbnail = previousImageWrap.querySelector("img");

        // Reset previous video by recreating the thumbnail image
        if (previousThumbnail) {
            const newThumbnail = document.createElement("img");
            newThumbnail.src = previousThumbnail.src; // Keep the same source for the image
            newThumbnail.alt = "Thumbnail"; // Set alt text
            previousImageWrap.innerHTML = ""; // Clear current content
            previousImageWrap.appendChild(newThumbnail); // Add the new thumbnail image
        }

        // Reset the play icon visibility
        if (currentPlayIcon) {
            currentPlayIcon.style.display = "block";
        }
    }

    // Create iframe HTML to embed the YouTube video
    const iframeHTML = `<iframe width="100%" height="200px" src="https://www.youtube.com/embed/${videoId}?autoplay=1&mute=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>`;

    // Replace the thumbnail with the iframe for the new video
    imageWrap.innerHTML = iframeHTML;

    // Hide the play icon after the video starts
    playIconElement.style.display = "none";

    // Update the references for the currently playing video and play icon
    currentPlayingVideo = imageWrap;
    currentPlayIcon = playIconElement;
}

// Initial fetch to display the videos
fetchVideos();
